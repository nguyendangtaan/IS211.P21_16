"""
File demo d∆∞·ªõi ƒë√¢y s·∫Ω:

- K·∫øt n·ªëi t·ªõi m·ªôt trong c√°c database b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a (Local ho·∫∑c Remote).
- Th·ª±c hi·ªán c√°c thao t√°c CRUD ƒë∆°n gi·∫£n.
- In ra c√°c th√¥ng ƒëi·ªáp gi·∫£i th√≠ch r·∫±ng CockroachDB ƒëang ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c sao ch√©p b√™n trong c·ª•m ƒë√≥.

T√°c gi·∫£: L√¢m Tu·∫•n Th·ªãnh - 22521408 - Nh√≥m 16 - BTL2 CSDLPT
"""

# replication_demo.py
import psycopg2
import time
from Connection.connect_retrieve import get_wsl_ip
from tabulate import tabulate
from datetime import datetime

def show_current_data(conn, operation_type=None):
    """Hi·ªÉn th·ªã d·ªØ li·ªáu hi·ªán t·∫°i trong b·∫£ng m·ªôt c√°ch tr·ª±c quan"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, message, created_at 
                FROM replication_demo_table 
                ORDER BY id;
            """)
            records = cur.fetchall()
            
            if records:
                print("\nüìã D·ªØ li·ªáu hi·ªán t·∫°i trong b·∫£ng:")
                print("-" * 80)
                headers = ["ID", "Message", "Th·ªùi gian t·∫°o"]
                print(tabulate(records, headers=headers, tablefmt="grid"))
                
                if operation_type:
                    print(f"\n‚ú® Thao t√°c v·ª´a th·ª±c hi·ªán: {operation_type}")
                    print(f"üìä T·ªïng s·ªë b·∫£n ghi: {len(records)}")
            else:
                print("\nüìã B·∫£ng hi·ªán ƒëang tr·ªëng")
                
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu: {e}")

def connect_db(host, port, dbname, user="root", sslmode="disable", connect_timeout=10):
    """K·∫øt n·ªëi t·ªõi m·ªôt database CockroachDB"""
    print(f"\nüîå ƒêang k·∫øt n·ªëi t·ªõi database tr√™n {host}:{port}/{dbname}...")
    try:
        conn = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            database=dbname,
            sslmode=sslmode,
            connect_timeout=connect_timeout
        )
        print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi {host}:{port}/{dbname}!")
        return conn
    except Exception as e:
        print(f"‚ùå K·∫øt n·ªëi th·∫•t b·∫°i: {e}")
        return None

def show_cluster_info(conn):
    """Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n v·ªÅ c·ª•m"""
    print("\nüìä Th√¥ng tin C·ª•m:")
    print("-" * 50)
    
    try:
        with conn.cursor() as cur:
            # Th√¥ng tin node
            cur.execute("""
                SELECT node_id, address, is_live
                FROM crdb_internal.gossip_nodes 
                WHERE node_id IS NOT NULL
                ORDER BY node_id;
            """)
            nodes = cur.fetchall()
            
            if nodes:
                print("\nüñ•Ô∏è  Nodes trong c·ª•m:")
                headers = ["Node ID", "ƒê·ªãa ch·ªâ", "Tr·∫°ng th√°i"]
                print(tabulate(nodes, headers=headers, tablefmt="simple"))
            
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c·ª•m: {e}")

def create_replication_test_table(conn):
    """T·∫°o b·∫£ng ƒë·ªÉ ki·ªÉm th·ª≠ (n·∫øu ch∆∞a t·ªìn t·∫°i)"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS replication_demo_table (
                    id SERIAL PRIMARY KEY,
                    message TEXT,
                    created_at TIMESTAMPTZ DEFAULT now()
                );
            """)
            conn.commit()
            print("üëç B·∫£ng 'replication_demo_table' ƒë√£ s·∫µn s√†ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {e}")
        conn.rollback()

def insert_data(conn, message):
    """Ch√®n d·ªØ li·ªáu v√† gi·∫£i th√≠ch v·ªÅ sao ch√©p"""
    print(f"\n‚úèÔ∏è ƒêang ch√®n d·ªØ li·ªáu: '{message}'")
    try:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO replication_demo_table (message) VALUES (%s) RETURNING id;", (message,))
            new_id = cur.fetchone()[0]
            conn.commit()
            print(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ch√®n v·ªõi ID: {new_id}")
            print("‚ÑπÔ∏è  D·ªØ li·ªáu ƒë∆∞·ª£c sao ch√©p t·ªõi c√°c replica trong c·ª•m")
            show_current_data(conn, "INSERT")
            return new_id
    except Exception as e:
        print(f"‚ùå L·ªói khi ch√®n d·ªØ li·ªáu: {e}")
        conn.rollback()
        return None

def select_data(conn, record_id):
    """ƒê·ªçc d·ªØ li·ªáu v√† gi·∫£i th√≠ch"""
    print(f"\nüîç ƒêang ƒë·ªçc d·ªØ li·ªáu v·ªõi ID: {record_id}")
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT id, message, created_at FROM replication_demo_table WHERE id = %s;", (record_id,))
            record = cur.fetchone()
            if record:
                print(f"‚úÖ D·ªØ li·ªáu t√¨m th·∫•y: ID={record[0]}, Message='{record[1]}', CreatedAt={record[2]}")
                print("‚ÑπÔ∏è  D·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªçc t·ª´ leaseholder ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n")
            else:
                print(f"ü§∑ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªõi ID: {record_id}")
            return record
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {e}")
        return None

def update_data(conn, record_id, new_message):
    """C·∫≠p nh·∫≠t d·ªØ li·ªáu v√† gi·∫£i th√≠ch"""
    print(f"\nüîÑ ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu cho ID: {record_id}")
    try:
        with conn.cursor() as cur:
            cur.execute("UPDATE replication_demo_table SET message = %s WHERE id = %s RETURNING id;", (new_message, record_id))
            updated_id = cur.fetchone()
            conn.commit()
            if updated_id:
                print(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t")
                print("‚ÑπÔ∏è  Thay ƒë·ªïi ƒë∆∞·ª£c sao ch√©p t·ªõi c√°c replica")
                show_current_data(conn, "UPDATE")
            else:
                print(f"ü§∑ Kh√¥ng t√¨m th·∫•y ID: {record_id} ƒë·ªÉ c·∫≠p nh·∫≠t")
            return updated_id
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {e}")
        conn.rollback()
        return None

def delete_data(conn, record_id):
    """X√≥a d·ªØ li·ªáu v√† gi·∫£i th√≠ch"""
    print(f"\nüóëÔ∏è ƒêang x√≥a d·ªØ li·ªáu v·ªõi ID: {record_id}")
    try:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM replication_demo_table WHERE id = %s RETURNING id;", (record_id,))
            deleted_id = cur.fetchone()
            conn.commit()
            if deleted_id:
                print(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a")
                print("‚ÑπÔ∏è  X√≥a ƒë∆∞·ª£c sao ch√©p t·ªõi c√°c replica")
                show_current_data(conn, "DELETE")
            else:
                print(f"ü§∑ Kh√¥ng t√¨m th·∫•y ID: {record_id} ƒë·ªÉ x√≥a")
            return deleted_id
    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {e}")
        conn.rollback()
        return None

def main():
    wsl_ip = get_wsl_ip()

    # ƒê·ªãnh nghƒ©a c√°c k·∫øt n·ªëi c√≥ th·ªÉ s·ª≠ d·ª•ng
    available_connections_config = [
        {
            "name": "Local WSL Database (db1)",
            "host": wsl_ip,
            "port": 26257,
            "db": "db1"
        },
        {
            "name": "Remote Database T√¢n (db2)",
            "host": "26.94.39.56", 
            "port": 26257, 
            "db": "db2"
        }
    ]

    print("=" * 50)
    print("üöÄ COCKROACHDB REPLICATION DEMO")
    print("=" * 50)
    print("Demo minh h·ªça c√°ch CockroachDB sao ch√©p d·ªØ li·ªáu trong c·ª•m")
    
    print("\nCh·ªçn c·ª•m CockroachDB ƒë·ªÉ th·ª±c hi·ªán demo:")
    for i, cfg in enumerate(available_connections_config):
        print(f"{i+1}. {cfg['name']} ({cfg['host']}:{cfg['port']}/{cfg['db']})")
    
    choice = -1
    while choice < 1 or choice > len(available_connections_config):
        try:
            choice = int(input(f"Nh·∫≠p l·ª±a ch·ªçn (1-{len(available_connections_config)}): "))
        except ValueError:
            print("Vui l√≤ng nh·∫≠p m·ªôt s·ªë.")

    selected_config = available_connections_config[choice-1]
    
    # K·∫øt n·ªëi t·ªõi database ƒë√£ ch·ªçn
    conn = connect_db(selected_config["host"], selected_config["port"], selected_config["db"])

    if conn:
        try:
            # Hi·ªÉn th·ªã th√¥ng tin c·ª•m
            show_cluster_info(conn)
            
            # T·∫°o b·∫£ng v√† th·ª±c hi·ªán c√°c thao t√°c
            create_replication_test_table(conn)
            show_current_data(conn)
            
            time.sleep(1)
            message1 = "Hello CockroachDB Replication!"
            record_id1 = insert_data(conn, message1)
            
            time.sleep(1)
            if record_id1:
                select_data(conn, record_id1)
            
            time.sleep(1)
            if record_id1:
                new_message = "Replication ensures data is safe and consistent!"
                update_data(conn, record_id1, new_message)
            
            time.sleep(1)
            if record_id1:
                select_data(conn, record_id1)
            
            time.sleep(1)
            message2 = "Another record for testing."
            record_id2 = insert_data(conn, message2)

            time.sleep(1)
            if record_id1:
                delete_data(conn, record_id1)
            
            time.sleep(1)
            if record_id1:
                select_data(conn, record_id1)

            if record_id2:
                select_data(conn, record_id2)

            print("\n" + "="*50)
            print("‚ú® Demo ho√†n t·∫•t!")
            print("Nh·ªØng g√¨ b·∫°n ƒë√£ th·∫•y:")
            print("  1. D·ªØ li·ªáu ƒë∆∞·ª£c ghi v√†o c·ª•m CockroachDB")
            print("  2. M·ªói thao t√°c ƒë∆∞·ª£c sao ch√©p t·ªõi c√°c replica")
            print("  3. D·ªØ li·ªáu v·∫´n an to√†n khi c√≥ node g·∫∑p s·ª± c·ªë")
            print("="*50)

        finally:
            print("\nüîí ƒê√≥ng k·∫øt n·ªëi...")
            conn.close()
            print("‚úÖ K·∫øt n·ªëi ƒë√£ ƒë√≥ng.")
    else:
        print("Kh√¥ng th·ªÉ th·ª±c hi·ªán demo v√¨ kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c database.")

if __name__ == "__main__":
    main()